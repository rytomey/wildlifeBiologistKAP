---
title: "Chi-Squared Analysis of Binary Variables"
date: "`r Sys.Date()`"
format: 
  html:
    html-table-processing: none
    toc: true
    toc-depth: 4
    toc-location: left
    number-sections: true
    code-fold: true
    code-summary: "Show Code"
    fig-cap-location: bottom
    smooth-scroll: true
    theme: flatly
    font-family: serif
    font-size: 12px
    line-height: 150%
    css: styles.css  # Reference your CSS file here
editor: 
  markdown: 
    wrap: 72
---

# Initialization
```{r include=FALSE}

require(rcompanion)
require(dplyr)
require(vcd)
require(writexl)

base = normalizePath(file.path("..", ".."), mustWork = FALSE)  
analyses = file.path(base, "analyses")
oup = file.path(analyses, "outputs")
psurv = read.csv(file.path(oup, "processedKAP.csv"))
psurv 

```

# Bivariate Analysis 
## Chi-Sq / Cramers V Function
```{r}

binFUN <- function(var1, var2, data) {
  if (!all(c(var1, var2) %in% names(data))) return(rep(NA, 10))
  x <- data[[var1]]
  y <- data[[var2]]
  tab <- table(x, y)
  if (!all(dim(tab) == c(2, 2))) return(rep(NA, 10))
  chi <- chisq.test(tab, correct = TRUE)
  cramv <- as.numeric(cramerV(tab))
  c(
    chistat     = chi$statistic,
    chi.df      = chi$parameter,
    chi.pvalue  = chi$p.value,
    CramV       = cramv,
    zero_zero   = tab[1, 1],
    zero_one    = tab[2, 1],
    one_zero    = tab[1, 2],
    one_one     = tab[2, 2],
    colzerotot  = sum(tab[, 1]),
    colonetot   = sum(tab[, 2])
  )
}

```

## Variable Comparisons
```{r}

demographics <- c("AGEbin", "GENDERbin", "RACEbin", "INCOMEbinmed", "INCOMEbinavg", "ACCESSbin")
experience   <- c("EDUCATIONbin", "DEGREEbin", "TWSbin", "COURSEbin", "COURSETIMEbin", "BIOTIMEbin", "AFFILIATEbin")
knowledge    <- c("CORRECT50", "CERTAIN50", "CCORRECT50", "CORRECTmed", "CERTAINmed", 
                  "CCORRECTtmed", "CORRECTavg", "CERTAINavg", "CCORRECTtavg")
attitudes    <- c("INTERESTCERTAIN", "SELFTITLEbin", "INTERESTbin", "TOPICSbin", "FREEINFObin", "ATTITUDEIDNEUTRAL")
practices    <- c("noSOURCE", "COLLECTbin", "COLLECTEDbin", "HANDLEbin", "STATEbin", 
                  "PPEbin", "PPETIMEbin", "FIELDbin", "CONTACTbin", "COUNTYbin", "LICENSEbin", "SOURCEbin")

binLIST <- list(
  DEMO_KNOW  = expand.grid(demographics, knowledge),
  EXP_KNOW   = expand.grid(experience, knowledge),
  DEMO_ATT   = expand.grid(demographics, attitudes),
  EXP_ATT    = expand.grid(experience, attitudes),
  DEMO_PRACT = expand.grid(demographics, practices),
  EXP_PRACT  = expand.grid(experience, practices),
  KNOW_ATT   = expand.grid(knowledge, attitudes),
  KNOW_PRACT = expand.grid(knowledge, practices),
  ATT_PRACT  = expand.grid(attitudes, practices)
)

```

## Running Analyses
```{r} 

binRESULTS <- lapply(names(binLIST), function(cat) {
  df <- binLIST[[cat]]
  out <- do.call(rbind, mapply(function(x, y) {
    result <- binFUN(x, y, psurv)
    names(result) <- NULL
    return(result)
  }, df[[1]], df[[2]], SIMPLIFY = FALSE))
  out_df <- as.data.frame(out)
  colnames(out_df) <- c("chistat", "chi.df", "chi.pvalue", "CramV", "zero_zero", "zero_one",
                        "one_zero", "one_one", "colzerotot", "colonetot")
  out_df$var1 <- df[[1]]
  out_df$var2 <- df[[2]]
  return(out_df)
})
names(binRESULTS) <- names(binLIST)

```

## Export DFs
```{r}
oup <- file.path(analyses, "outputs")
if (!dir.exists(oup)) dir.create(oup, recursive = TRUE)
write_xlsx(binRESULTS, path = file.path(oup, "binaryRESULTS.xlsx"))
```


```{r}

library(broom)
library(openxlsx)

attitude_outcomes <- c("INTERESTCERTAIN", "SELFTITLEbin", "INTERESTbin", "TOPICSbin", "FREEINFObin", "ATTITUDEIDNEUTRAL")

predictors <- c("CORRECT50", "CERTAIN50", "CCORRECT50", "CORRECTmed", "CERTAINmed", "CCORRECTtmed",
                "CORRECTavg", "CERTAINavg", "CCORRECTtavg", 
                "AGEbin", "GENDERbin", "RACEbin", "INCOMEbinmed", "ACCESSbin",
                "EDUCATIONbin", "DEGREEbin", "TWSbin", "COURSEbin", "COURSETIMEbin", "BIOTIMEbin", "AFFILIATEbin")

glmLIST <- list()

for (att in attitude_outcomes) {
  formula <- as.formula(paste(att, "~", paste(predictors, collapse = " + ")))
  glm_fit <- glm(formula, data = psurv, family = binomial)
  glmLIST[[att]] <- glm_fit  # Store model, not summary
}

# Extract tidy results with OR and CI
glmRESULTS <- lapply(glmLIST, function(model) {
  tidy(model) %>%
    mutate(OR = exp(estimate),
           lower = exp(estimate - 1.96 * std.error),
           upper = exp(estimate + 1.96 * std.error))
})

# Export to Excel
names(glmRESULTS) <- attitude_outcomes
write.xlsx(glmRESULTS, file = file.path(oup, "glmRESULTS.xlsx"))


```

