---
title: "KAP Analysis"
date: "`r Sys.Date()`"
format: 
  html:
    html-table-processing: none
    toc: true
    toc-depth: 4
    toc-location: left
    number-sections: true
    code-fold: true
    code-summary: "Show Code"
    fig-cap-location: bottom
    smooth-scroll: true
    theme: flatly
    font-family: serif
    font-size: 12px
    line-height: 150%
    css: styles.css  # Reference your CSS file here
editor: 
  markdown: 
    wrap: 72
---


# Initialization
```{r include=FALSE}

require(rcompanion)
require(vcd)
require(writexl)
require(broom)
require(openxlsx)
require(MASS)       # for clm
require(nnet)       # for multinom
require(dplyr)
require(tidyr)
require(stringr)
require(car)        # for VIF checks
require(ordinal)    # for clm if preferred
require(writexl)

base = normalizePath(file.path("..", ".."), mustWork = FALSE)  
analyses = file.path(base, "analyses")
oup = file.path(analyses, "outputs")
psurv = read.csv(file.path(oup, "processedKAP.csv"))
psurv 

```

# Bivariate Analysis 
## Chi-Sq / Cramers V Function
```{r}

binFUN <- function(var1, var2, data) {
  if (!all(c(var1, var2) %in% names(data))) return(data.frame())
  
  x <- data[[var1]]
  y <- data[[var2]]
  tab <- table(x, y)
  
  # Drop unused factor levels
  x <- droplevels(factor(x))
  y <- droplevels(factor(y))
  
  if (any(dim(tab) < 2)) return(data.frame())  # Must be at least 2x2
  
  suppressWarnings({
    chi <- tryCatch(
      chisq.test(tab, simulate.p.value = TRUE, B = 999),
      error = function(e) return(NULL)
    )
  })
  
  if (is.null(chi)) return(data.frame())
  
  assoc <- tryCatch(
    suppressWarnings(vcd::assocstats(tab)),
    error = function(e) return(NULL)
  )
  
  cramv <- if (!is.null(assoc)) as.numeric(assoc$cramer) else NA

  data.frame(
    chistat     = unname(chi$statistic),
    chi.df      = unname(chi$parameter),
    chi.pvalue  = unname(chi$p.value),
    CramV       = cramv,
    dim1        = nrow(tab),
    dim2        = ncol(tab),
    var1        = var1,
    var2        = var2
  )
}

```

## Variable Comparisons
```{r}

demographics <- c("AGEbin", "GENDERbin", "RACEbin", "INCOMEbinmed", "INCOMEbinavg", 
                  "ACCESSbin", "SELFTITLEbin", "AFFILIATEbin")

experience <- c("EDUCATIONbin", "DEGREEbin", "TWSbin", "COURSEbin", "COURSETIMEbin", 
                "BIOTIMEbin", "COUNTIESbin", "STATEbin", "FIELDbin", "CONTACTbin")

knowledge <- c("CORRECT50", "CERTAIN50", "CCORRECT50", 
               "CORRECTmed", "CERTAINmed", "CCORRECTmed", 
               "CORRECTavg", "CERTAINavg", "CCORRECTavg")

attitudes <- c("INTERESTbin", "TOPICSbin", "FREEINFObin", "noSOURCE")

practices <- c("COLLECTbin", "HANDLEbin", "PPEbin", 
               "LICENSEbin", "PPETIMEbin", "SOURCEbin")


binLIST <- list(
  DEMO_KNOW  = expand.grid(demographics, knowledge),
  EXP_KNOW   = expand.grid(experience, knowledge),
  DEMO_ATT   = expand.grid(demographics, attitudes),
  EXP_ATT    = expand.grid(experience, attitudes),
  DEMO_PRACT = expand.grid(demographics, practices),
  EXP_PRACT  = expand.grid(experience, practices),
  KNOW_ATT   = expand.grid(knowledge, attitudes),
  KNOW_PRACT = expand.grid(knowledge, practices),
  ATT_PRACT  = expand.grid(attitudes, practices))


```

## Running Analyses
```{r}
#| message: false
#| warning: false

binRESULTS <- lapply(names(binLIST), function(cat) {
  df <- binLIST[[cat]]
  out <- do.call(rbind, mapply(function(x, y) {
    binFUN(x, y, psurv)
  }, df[[1]], df[[2]], SIMPLIFY = FALSE))
  
  # Add category name
  out$category <- cat
  return(out)
})

# Combine into one large dataframe
all_bivariate <- do.call(rbind, binRESULTS)

```

# Correction and Filtering
```{r}

# Adjust p-values per category using FDR
all_bivariate <- all_bivariate %>%
  group_by(category) %>%
  mutate(p.adj = p.adjust(chi.pvalue, method = "BH")) %>%
  ungroup()

# Optional filtering: highlight meaningful results
sig_bivariate <- all_bivariate %>%
  filter(p.adj < 0.05 & CramV > 0.1) %>%
  arrange(p.adj)


```

## Export DFs
```{r}
oup <- file.path(analyses, "outputs")

write_xlsx(list(
  "All_Bivariate" = all_bivariate,
  "Significant_Bivariate" = sig_bivariate
), path = file.path(oup, "updated_chicramRESULTS.xlsx"))

```

### Markdown
```{r}

library(knitr)
library(dplyr)

# Top N significant associations (can adjust N)
top_sig <- sig_bivariate %>%
  arrange(p.adj) %>%
  head(15) %>%
  mutate(across(where(is.numeric), ~round(., 3))) %>%
  dplyr::select(var1, var2, chistat, chi.df, chi.pvalue, p.adj, CramV, dim1, dim2, category)

# Display table in markdown
kable(top_sig, caption = "Top 15 Significant Bivariate Associations (Chi-Square + Cramér's V)")

library(ggplot2)

# Prepare heatmap input (filter for clarity)
heat_df <- sig_bivariate %>%
  filter(CramV > 0.1, p.adj < 0.05) %>%
  mutate(var_combo = paste(var1, var2, sep = " × ")) %>%
  arrange(desc(CramV))

ggplot(heat_df, aes(x = var1, y = var2, fill = CramV)) +
  geom_tile(color = "white") +
  geom_text(aes(label = round(CramV, 2)), size = 3) +
  scale_fill_gradient(low = "#F9E79F", high = "#D35400", name = "Cramér's V") +
  labs(
    title = "Significant Bivariate Associations",
    subtitle = "Filtered for Cramér’s V > 0.1 and FDR-adjusted p < 0.05",
    x = "Variable 1",
    y = "Variable 2"
  ) +
  theme_minimal(base_size = 10) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))



```


# Linear Models 
## Format Variables and Define Outcomes 
```{r}
# --- Convert binary predictors to factor (0/1 or Yes/No format) ---
binary_predictors <- c(
  "INTERESTbin", "SELFTITLEbin", "ACCESSbin", "AGEbin", "GENDERbin", "RACEbin",
  "INCOMEbinmed", "INCOMEbinavg", "AFFILIATEbin", "DEGREEbin", "TWSbin",
  "COURSEbin", "EDUCATIONbin", "COURSETIMEbin", "BIOTIMEbin", "COUNTIESbin",
  "STATEbin", "FIELDbin", "CONTACTbin", "TOPICSbin", "FREEINFObin", 
  "CORRECT50", "CERTAIN50", "CCORRECT50", "CORRECTmed", "CERTAINmed", 
  "CCORRECTmed", "CORRECTavg", "CERTAINavg", "CCORRECTavg",
  "COLLECTbin", "HANDLEbin", "PPEbin", "LICENSEbin", "PPETIMEbin", "SOURCEbin"
)

psurv[binary_predictors] <- lapply(psurv[binary_predictors], as.factor)

# --- Convert continuous outcomes to numeric ---
numeric_outcomes <- c(
  "TOPICSnum", "FREEINFOnum", "NEUTRALnum", "AGREEnum", "DISAGREEnum",
  "AGEnum", "INCOMEnum", "COUNTIESnum", "FIELDnum", 
  "CORRECTnum", "CERTAINnum", "CCORRECTnum", "SOURCEnum"
)

psurv[numeric_outcomes] <- lapply(psurv[numeric_outcomes], as.numeric)

# --- Convert ordinal outcomes to ordered factors ---
ordinal_outcomes <- c(
  "CWDALord", "BATSord", "PPEREQord", "EHDord", "DARWINord",
  "POPREDord", "POPPLANord", "SURVEYord", "VACCINEord", "PREVALord",
  "DIVERSEord", "CONSEQord", "CLIMATEord", "EDREQord", "INFOord", 
  "HANDSONord", "INCOMEord", "EDUCATIONord", "COURSETIMEord", "BIOTIMEord", 
  "CONTACTord", "ACTIVITYord", "PPETIMEord"
)

psurv[ordinal_outcomes] <- lapply(psurv[ordinal_outcomes], function(x) factor(x, ordered = TRUE))

# --- Optional specific level ordering ---
if ("PPETIMEord" %in% names(psurv)) {
  psurv$PPETIMEord <- factor(psurv$PPETIMEord,
                             ordered = TRUE,
                             levels = c("Never (0%)", "Rarely (1%-24%)",
                                        "Sometimes (25%-75%)", "Usually (76%-99%)",
                                        "Always (100%)"))
}

```

## Fit Linear Models and Diagnostics
```{r}
# Define predictors to use
predictors <- c("AGEbin", "INCOMEbinmed", "EDUCATIONbin", "BIOTIMEbin", "CONTACTbin", 
                "COLLECTbin", "HANDLEbin", "SOURCEbin", "FIELDbin")

lm_formula_base <- paste(predictors, collapse = " + ")

# Fit linear models
lm_models <- list()
lm_diagnostics <- list()

for (y in numeric_outcomes) {
  fml <- as.formula(paste0(y, " ~ ", lm_formula_base))
  mod <- tryCatch(lm(fml, data = psurv), error = function(e) NULL)
  
  if (!is.null(mod)) {
    lm_models[[y]] <- mod
    
    diag <- list(
      shapiro_p = tryCatch(shapiro.test(residuals(mod))$p.value, error = function(e) NA),
      bptest_p  = tryCatch(lmtest::bptest(mod)$p.value, error = function(e) NA),
      vif       = tryCatch(car::vif(mod), error = function(e) NULL)
    )
    
    lm_diagnostics[[y]] <- diag
  }
}


```

## Summarize and Export
```{r}

# Coefficients
lm_coef_summary <- bind_rows(lapply(names(lm_models), function(name) {
  tidy(lm_models[[name]], conf.int = TRUE) %>%
    mutate(Response = name)
}))

# Model fit
lm_fit_summary <- bind_rows(lapply(names(lm_models), function(name) {
  glance(lm_models[[name]]) %>%
    mutate(Response = name)
})) %>%
  dplyr::select(Response, r.squared, adj.r.squared, AIC, BIC, p.value)

# Filter significant
lm_sig <- lm_coef_summary %>%
  filter(!is.na(p.value), p.value < 0.05) %>%
  arrange(Response, p.value)

# VIFs
vif_summary <- bind_rows(lapply(names(lm_diagnostics), function(resp) {
  vif_vals <- lm_diagnostics[[resp]]$vif
  if (is.null(vif_vals)) return(NULL)
  data.frame(Response = resp, Predictor = names(vif_vals), VIF = unname(vif_vals))
}))

# Residual diagnostics
resid_diag <- bind_rows(lapply(names(lm_diagnostics), function(resp) {
  diag <- lm_diagnostics[[resp]]
  data.frame(Response = resp,
             ShapiroP = diag$shapiro_p,
             BPtestP = diag$bptest_p)
}))

write_xlsx(list(
  "Linear_Coefficients" = lm_coef_summary,
  "Linear_Significant" = lm_sig,
  "Linear_Model_Fit" = lm_fit_summary,
  "VIFs" = vif_summary,
  "Residual_Diagnostics" = resid_diag
), path = file.path(oup, "linear_model_outputs_processed.xlsx"))


```

## Visual
```{r}

# Filter significant terms
top_lm_effects <- lm_coef_summary %>%
  filter(p.value < 0.05) %>%
  filter(!grepl("(Intercept)", term)) %>%
  arrange(p.value) %>%
  mutate(term = reorder(term, estimate))

# Plot
ggplot(top_lm_effects, aes(x = estimate, y = term)) +
  geom_point(color = "#0072B2") +
  geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), height = 0.2) +
  facet_wrap(~ Response, scales = "free_y") +
  theme_minimal(base_size = 10) +
  labs(
    title = "Significant Linear Model Predictors",
    x = "Estimate (±95% CI)",
    y = "Predictor"
  )

```


# Ordinal Regression
```{r}

# Define your ordinal attitude outcomes
ordinal_attitudes <- c(
  "CWDALord", "BATSord", "PPEREQord", "EHDord", "DARWINord",
  "POPREDord", "POPPLANord", "SURVEYord", "VACCINEord",
  "PREVALord", "DIVERSEord", "CONSEQord", "CLIMATEord",
  "EDREQord", "INFOord", "HANDSONord"
)

# Make sure these are ordered factors
psurv[ordinal_attitudes] <- lapply(psurv[ordinal_attitudes], function(x) {
  factor(x, ordered = TRUE)
})

# Define your predictor formula (modify if needed)
predictors <- "~ AGEbin + INCOMEbinmed + EDUCATIONbin + BIOTIMEbin + CONTACTbin + COLLECTbin + HANDLEbin + FIELDnum + SOURCEbin"

# Initialize containers
clm_models <- list()
po_tests <- list()

# Run clm models with assumption tests
for (var in ordinal_attitudes) {
  fml <- as.formula(paste(var, predictors))
  model <- tryCatch(clm(fml, data = psurv, Hess = TRUE), error = function(e) NULL)
  clm_models[[var]] <- model
  
  if (!is.null(model) && inherits(model, "clm")) {
    po_tests[[var]] <- list(
      nominal_test = tryCatch(nominal_test(model)$`Pr(>Chi)`[1], error = function(e) NA),
      scale_test   = tryCatch(scale_test(model)$`Pr(>Chi)`[1], error = function(e) NA)
    )
  } else {
    po_tests[[var]] <- list(nominal_test = NA, scale_test = NA)
  }
}

# Summarize coefficients
ordinal_summary <- bind_rows(lapply(names(clm_models), function(name) {
  mod <- clm_models[[name]]
  if (is.null(mod)) return(NULL)
  tidy(mod, conf.int = TRUE) %>%
    mutate(Response = name)
}))

# Join PO assumption results
po_summary <- bind_rows(lapply(names(po_tests), function(name) {
  data.frame(
    Response = name,
    PO_nominal_p = po_tests[[name]]$nominal_test,
    PO_scale_p   = po_tests[[name]]$scale_test
  )
})) %>%
  mutate(Violates_PO = ifelse(is.na(PO_nominal_p) | is.na(PO_scale_p),
                              NA,
                              PO_nominal_p < 0.05 | PO_scale_p < 0.05))

# Merge into final output
ordinal_summary <- ordinal_summary %>%
  left_join(po_summary, by = "Response")

# Filter significant (only predictors, not thresholds)
ordinal_sig <- ordinal_summary %>%
  filter(!grepl("\\|", term), !is.na(p.value), p.value < 0.05) %>%
  arrange(Response, p.value)

# Export
write_xlsx(list(
  "Ordinal_All_Coefficients" = ordinal_summary,
  "Ordinal_Significant_Effects" = ordinal_sig,
  "PO_Assumption_Tests" = po_summary
), path = file.path(oup, "ordinal_attitudes_results.xlsx"))


```

## Visual
```{r}
require(ggeffects)

# One ordinal model (replace with loop for all)
mod_example <- clm_models[["CWDALord"]]

# Plot predicted probabilities for a factor predictor
plot_data <- ggpredict(mod_example, terms = "EDUCATIONbin")

# Plot
plot(plot_data) +
  labs(title = "Predicted Probabilities: CWDALord by Education",
       x = "Education",
       y = "Probability") +
  theme_minimal(base_size = 12)

# Plot predicted probabilities for all models and save
dir.create("ordinal_preds", showWarnings = FALSE)

for (resp in names(clm_models)) {
  mod <- clm_models[[resp]]
  if (!inherits(mod, "clm")) next
  
  sig_terms <- ordinal_summary %>%
    filter(Response == resp, !grepl("\\|", term), p.value < 0.05) %>%
    pull(term)
  
  for (term in sig_terms) {
    message("Plotting: ", resp, " ~ ", term)
    pred <- tryCatch(ggpredict(mod, terms = term), error = function(e) NULL)
    if (is.null(pred)) next
    
    p <- plot(pred) +
      labs(title = paste("Predicted Probabilities:", resp),
           subtitle = paste("by", term),
           x = term, y = "Probability") +
      theme_minimal(base_size = 12)
    
    ggsave(paste0("ordinal_preds/", resp, "_", term, ".png"), plot = p, width = 7, height = 4)
  }
}


# Combine plots into a PDF if desired
library(gridExtra)
library(ggpubr)

pdf("ordinal_effects_plots.pdf", width = 7, height = 4)
for (f in list.files("ordinal_preds", pattern = "\\.png$", full.names = TRUE)) {
  grid::grid.raster(png::readPNG(f))
}
dev.off()

```

