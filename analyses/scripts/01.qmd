---
title: "Descriptive Statistiscs & Data Processing"
output: 
  html_document:
    toc: true
    toc_float: true
    number_sections: true
    theme: readable
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
```

### Packages
```{r include=FALSE}

require(dplyr)  
require(tidyr)  
require(stringr)
require(tibble) 
require(zipcodeR)
require(janitor)
require(writexl)
require(ggplot2)
require(rlang)
require(knitr)  
```

### Data Import
```{r}
#| echo: true
# setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
base = normalizePath(file.path("..", ".."), mustWork = FALSE)  
analyses = file.path(base, "analyses")
inp = file.path(analyses, "inputs")
surv = read.csv(file.path(inp, "progover60.csv"))
prog = read.csv(file.path(inp, "prog.csv"))

intFUN <- function(df, column = "PROG") {
  require(dplyr)
  df %>%
    mutate(
      prog_bin = cut(
        !!sym(column),
        breaks = seq(0, 100, by = 10),
        include.lowest = TRUE,
        right = FALSE,
        labels = paste0(seq(0, 90, 10), "-", seq(10, 100, 10), "%"))) %>%
    count(prog_bin, name = "Respondent_Count") %>%
    arrange(prog_bin)
 }
TPROG = intFUN(prog)
TPROG
PROG = intFUN(surv)
PROG

```
## Functions
```{r}
#| echo: true

#----------- Basic Summary Stats for Continuous/Categorical -----------------

sumFUN <- function(df) {
  summary_list <- list()
  
  for (colname in names(df)) {
    column <- df[[colname]]
    
    if (is.numeric(column)) {
 # Continuous variable summary
      summary_list[[colname]] <- tibble::tibble(
        Variable = colname,
        Type = "Continuous",
        N = sum(!is.na(column)),
        Mean = mean(column, na.rm = TRUE),
        Median = median(column, na.rm = TRUE),
        SD = sd(column, na.rm = TRUE),
        Min = min(column, na.rm = TRUE),
        Max = max(column, na.rm = TRUE)
      )
    } else if (is.factor(column) || is.character(column) || is.logical(column)) {
 # Categorical variable summary
      freq_table <- as.data.frame(table(column, useNA = "ifany"))
      names(freq_table) <- c("Level", "Count")
      freq_table$Variable <- colname
      freq_table$Proportion <- freq_table$Count / sum(freq_table$Count)
      freq_table <- freq_table[, c("Variable", "Level", "Count", "Proportion")]
      summary_list[[colname]] <- freq_table
    }
  }
  return(summary_list)
}

#----------------- Response Count (for numeric columns) -------------------
uniFUN <- function(df, columns = NULL) {
  if (is.null(columns)) {
    columns <- names(df)
  }
  list <- list()
  for (col in columns) {
    if (col %in% names(df)) {
      list[[col]] <- df %>%
        count(!!sym(col), name = "Count") %>%
        arrange(desc(Count))
    } else {
      warning(paste("Column", col, "not found in data."))
    }
  }
  return(list)
}

```

# QUALTRICS METADATA
#### Data Manipulation
```{r, echo = TRUE}

#------------ Filtering data (>70% completion) --------------
surv <- surv %>%
  filter(PROG >= 70)

#--------- Removing Responses DURATIONmin < 5 -----------
surv$DURATIONmin <- surv$DURATION / 60
surv <- surv %>%
  filter(DURATIONmin >= 5)


#---------- Duration (min) grouped by 10 minute intervals -----------
MD <- surv %>%
  filter(DURATIONmin < 45)

max_min <- ceiling(max(MD$DURATIONmin, na.rm = TRUE) / 10) * 10
breaks <- seq(0, max_min, by = 5)
labels <- paste0(head(breaks, -1), "-", tail(breaks, -1), " min")
MD$DURATIONminint <- cut(
  MD$DURATIONmin,
  breaks = breaks,
  right = FALSE,
  include.lowest = TRUE,
  labels = labels)

```


#### Descriptive Statistics 
```{r, echo = TRUE}

survsum = sumFUN(MD)
survuni = sumFUN(MD)
survuni$DURATIONmin
survuni$DURATIONminint

survsum = sumFUN(surv)
survuni = uniFUN(surv)
survsum = sumFUN(surv)
survuni = uniFUN(surv)

survsum$DURATIONmin
survsum$PROG

survsum$FINISHED
survsum$QSCORE
survsum$RECDATE

#-------------- RESPONSE COUNT ---------------
survuni$PROG
survuni$DURATIONmin

```



# DEMOGRAPHICS
#### Data Manipulation
```{r, echo = TRUE}

#--------- Calculating Age -----------
surv$AGEnum = 2024 - surv$DOB
surv$AGE <- 2024 - surv$DOB
surv$AGEint <- cut(
  surv$AGE,
  breaks = c(0, 29, 39, 49, 59, Inf),
  labels = c("20–29", "30–39", "40–49", "50–59", "60+"),
  right = TRUE,
  include.lowest = TRUE
)
age_summary <- surv %>%
  dplyr::count(AGEint, name = "Count") %>%
  dplyr::mutate(
    `Proportion (%)` = round(Count / sum(Count) * 100, 1))
print(age_summary)

#--------- Adding Respondent County -----------
zip_info <- zipcodeR::zip_code_db %>%
  select(zipcode, county, state)
surv <- surv %>%
  mutate(ZIPCODE = as.character(ZIPCODE)) %>%
  left_join(zip_info, by = c("ZIPCODE" = "zipcode"))
surv <- surv %>% select(-state)
names(surv)[names(surv) == "county"] <- "LOCATION"

```

#### Descriptive Statistics
```{r, echo = TRUE}

survsum = sumFUN(surv)
survuni = uniFUN(surv)
survsum = sumFUN(surv)
survuni = uniFUN(surv)

survsum$AGEnum
survsum$RACE
survsum$ETHNICITY
survsum$GENDER
survsum$INCOME
survsum$EDUCATION
survsum$DEGREE
survsum$TWS
survsum$COURSE
survsum$COURSETIME
survsum$SELFTITLE
survsum$AFFILIATEfill
survsum$BIOTIME
survsum$ACTIVITYfill
survsum$LICENSE

#-------------- Count / Category ---------------
survuni$AGEnum
survuni$DOB

#-------------- Other ---------------
survsum$othACTIVITY
survsum$othAFFILIATE

```
### Variable Processing
```{r, echo = TRUE}

surv <- surv %>%
  mutate(
    AGEbin = if_else(AGEnum <= median(2024 - DOB, na.rm = TRUE), 0L, 1L),
    RACEbin = case_when(
      RACE == "White" ~ 1L,
      RACE %in% c("Asian", "Black or African American", "Other") ~ 0L,
      RACE == "I prefer Not to answer" ~ NA_integer_,
      TRUE ~ NA_integer_),
    GENDERbin = case_when(
      GENDER == "Male" ~ 1L,
      GENDER == "Female" ~ 0L,
      GENDER %in% c("Other", "I prefer Not to answer") ~ NA_integer_,
      TRUE ~ NA_integer_),
    INCOMEbin = if_else(INCOME > 62027, 1L, 0L),
    EDUCATIONbin = case_when(
      EDUCATION %in% c("College Graduate/BA or BS (4-year degree)", "Graduate or Professional School") ~ 1L,
      EDUCATION %in% c("Did Not graduate high school/No GED", "High school graduate/GED",
                       "Some College/AA or AS (2-year degree)", "Technical/Vocational School") ~ 0L,
      TRUE ~ NA_integer_),
    DEGREEbin     = if_else(DEGREE == "Yes", 1L, if_else(DEGREE == "No", 0L, NA_integer_)),
    TWSbin        = if_else(TWS == "Yes", 1L, if_else(TWS == "No", 0L, NA_integer_)),
    COURSEbin     = if_else(COURSE == "Yes", 1L, if_else(COURSE == "No", 0L, NA_integer_)),
    SELFTITLEbin  = if_else(SELFTITLE == "Yes", 1L, if_else(SELFTITLE == "No", 0L, NA_integer_)),
    LICENSEbin    = if_else(LICENSE == "Yes", 1L, if_else(LICENSE == "No", 0L, NA_integer_)),
    COURSETIMEbin = case_when(
      COURSETIME %in% c("<5 years", "5-10 years") ~ 1L,
      COURSETIME == ">10 years" ~ 0L,
      TRUE ~ NA_integer_),
    BIOTIMEbin = case_when(
      BIOTIME %in% c("10-20 years", ">20 years") ~ 1L,
      BIOTIME %in% c("<1 year", "1-5 years", "5-10 years") ~ 0L,
      TRUE ~ NA_integer_))

table(surv$AGEbin)
table(surv$AGEint)
table(surv$RACEbin) 
table(surv$GENDERbin) 
table(surv$INCOMEbin) 
table(surv$EDUCATIONbin) 
table(surv$DEGREEbin) 
table(surv$TWSbin)
table(surv$COURSEbin) 
table(surv$SELFTITLEbin) 
table(surv$LICENSEbin) 
table(surv$COURSETIMEbin) 
table(surv$BIOTIMEbin) 

```


# KNOWLEDGE
#### Data Manipulation
```{r, echo = TRUE}

# PIGS, BRUCE, CWD, FLUAL, FLU, COVID, COVIDSPILL, RABIESAL, RABIES, TURKEY
answers <- list(
  PIGS       = "True",       
  BRUCE      = "False",      
  CWD        = "False",      
  FLUAL      = "True",       
  FLU        = "False",      
  COVID      = "True",       
  COVIDSPILL = "False",      
  RABIESAL   = "False",      
  RABIES     = "Bites",      
  TURKEY     = "Incinerate")

for (q in names(answers)) {
  correct <- tolower(str_trim(answers[[q]]))
  surv[[paste0(q, "corr")]] <- ifelse(
    tolower(str_trim(as.character(surv[[q]]))) == correct, 1, 0)
  surv[[paste0(q, "cert")]] <- ifelse(
    str_to_lower(str_trim(as.character(surv[[q]]))) != "I don't kNow" & !is.na(surv[[q]]),
    1, 0)
}

surv <- surv %>%
  rowwise() %>%
  mutate(
    CORRECTnum = sum(c_across(ends_with("corr")), na.rm = TRUE),
    CORRECTnum = sum(c_across(ends_with("cert")), na.rm = TRUE)) %>%
  ungroup()

```

#### Descriptive Statistics
```{r, echo = TRUE}

survsum = sumFUN(surv)
survuni = uniFUN(surv)
survsum = sumFUN(surv)
survuni = uniFUN(surv)

survsum$PIGS
survsum$BRUCE
survsum$CWD
survsum$FLUAL
survsum$COVID
survsum$COVIDSPILL
survsum$RABIESAL
survsum$RABIES
survsum$TURKEY

#------------ CORRECT -----------
survsum$PIGScorr
survsum$BRUCEcorr
survsum$CWDcorr
survsum$FLUALcorr
survsum$COVIDcorr
survsum$COVIDSPILLcorr
survsum$RABIEScorr
survsum$RABIESALcorr
survsum$TURKEYcorr


#------------ CERTAIN -----------
survsum$PIGScert
survsum$BRUCEcert
survsum$CWDcert
survsum$FLUALcert
survsum$COVIDcert
survsum$COVIDSPILLcert
survsum$RABIEScert
survsum$RABIESALcert
survsum$TURKEYcert

#------------ TOTAL -----------
survsum$CORRECTnum
survsum$CERTAINnum

```

#### Variable Processing
```{r, echo = TRUE}

surv <- surv %>%
  mutate(across(all_of(names(answers)), as.character)) %>%
  mutate(across(all_of(names(answers)), str_trim)) %>%
  mutate(across(all_of(names(answers)), tolower)) %>%
  rowwise() %>%
  mutate(
    across(all_of(names(answers)), 
           .fns = list(
             corr = ~ as.integer(. == tolower(answers[[cur_column()]])),
             cert = ~ as.integer(. != "I don't know" & !is.na(.))
           ),
           .names = "{.col}{.fn}"),
    CORRECTnum = sum(c_across(ends_with("corr")), na.rm = TRUE),
    CERTAINnum = sum(c_across(ends_with("cert")), na.rm = TRUE)
  ) %>%
  ungroup() %>%
  mutate(
    CORRECTmed = if_else(CORRECTnum > median(CORRECTnum, na.rm = TRUE), 1, 0),
    CORRECTavg = if_else(CORRECTnum >   mean(CORRECTnum, na.rm = TRUE), 1, 0),
    CERTAINmed = if_else(CERTAINnum > median(CERTAINnum, na.rm = TRUE), 1, 0),
    CERTAINavg = if_else(CERTAINnum >   mean(CERTAINnum, na.rm = TRUE), 1, 0))

 CORRECTmed   <- median(surv$CORRECTnum, na.rm = TRUE)
 CORRECTavg   <-   mean(surv$CORRECTnum, na.rm = TRUE)
 CERTAINmed    <- median(surv$CERTAINnum, na.rm = TRUE)
 CERTAINavg    <- mean(surv$CERTAINnum, na.rm = TRUE)
CORRECTmed 
 CORRECTavg 
 CERTAINmed  
 CERTAINavg  


table(surv$CORRECTmed)
table(surv$CORRECTavg)
table(surv$CERTAINmed)
table(surv$CERTAINavg)
table(surv$CORRECTnum)
table(surv$CERTAINnum )

```


# ATTITUDES
#### Data Manipulation
```{r, echo = TRUE}

# Define reverse-coded items (Disagree = Favorable)
attitude_reverse <- c("DARWIN", "POPRED", "HANDSON")

# Define forward-coded items (Agree = Favorable)
attitude_forward <- c("CWDAL", "BATS", "PPEREQ", "EHD", "POPPLAN", "SURVEY",
                      "VACCINE", "PREVAL", "DIVERSE", "CONSEQ", "CLIMATE", "EDREQ", "INFO")

# Recode to 3-level attitude scale
surv <- surv %>%
  mutate(across(all_of(attitude_forward),
                ~ case_when(
                  . %in% c("Strongly Agree", "Agree") ~ "Favorable",
                  . == "Neutral" ~ "Neutral",
                  . %in% c("Disagree", "Strongly Disagree") ~ "Unfavorable",
                  TRUE ~ NA_character_),
                .names = "{.col}att")) %>%
  mutate(across(all_of(attitude_reverse),
                ~ case_when(
                  . %in% c("Strongly Disagree", "Disagree") ~ "Favorable",
                  . == "Neutral" ~ "Neutral",
                  . %in% c("Agree", "Strongly Agree") ~ "Unfavorable",
                  TRUE ~ NA_character_),
                .names = "{.col}att"))

# Convert all to ordered factors
surv <- surv %>%
  mutate(across(ends_with("att"), ~ factor(.x, levels = c("Unfavorable", "Neutral", "Favorable"), ordered = TRUE)))

table(surv$CWDALatt)
table(surv$BATSatt)
table(surv$PPEREQatt)
table(surv$EHDatt)
table(surv$DARWINatt)
table(surv$POPREDatt)
table(surv$POPPLANatt)
table(surv$SURVEYatt)
table(surv$VACCINEatt)
table(surv$PREVALatt)
table(surv$DIVERSEatt)
table(surv$CONSEQatt)
table(surv$CLIMATEatt)

```

#### Descriptive Statistics
```{r, echo = TRUE}

survsum = sumFUN(surv)
survuni = uniFUN(surv)
survsum = sumFUN(surv)
survuni = uniFUN(surv)

#----------- 5-level likert -----------------
survsum$CWDAL
survsum$BATS
survsum$PPEREQ
survsum$EHD
survsum$DARWIN
survsum$POPRED
survsum$POPPLAN
survsum$SURVEY
survsum$VACCINE
survsum$PREVAL
survsum$DIVERSE
survsum$CONSEQ
survsum$CLIMATE

#------------ 3 levels ---------------
survsum$CWDALatt
survsum$BATSatt
survsum$PPEREQatt
survsum$EHDatt
survsum$DARWINatt
survsum$POPREDatt
survsum$POPPLANatt
survsum$SURVEYatt
survsum$VACCINEatt
survsum$PREVALatt
survsum$DIVERSEatt
survsum$CONSEQatt
survsum$CLIMATEatt

```
#### Variable Processing
```{r, echo = TRUE}

# List of all 3-level recoded attitude variables
attitude_ord_vars <- c("CWDALatt", "BATSatt", "PPEREQatt", "EHDatt", "POPPLANatt", "SURVEYatt",
                       "VACCINEatt", "PREVALatt", "DIVERSEatt", "CONSEQatt", "CLIMATEatt",
                       "EDREQatt", "INFOatt", "DARWINatt", "POPREDatt", "HANDSONatt")


# Recode attitude variables to numeric: Favorable = 2, Neutral = 1, Unfavorable = 0
surv <- surv %>%
  mutate(across(all_of(attitude_ord_vars),
                ~ recode(.x,
                         "Favorable"   = 2L,
                         "Neutral"     = 1L,
                         "Unfavorable" = 0L),
                .names = "{.col}num"))

attitudenum_vars <- paste0(attitude_ord_vars, "num")
surv <- surv %>%
  mutate(ATTITUDEnum = rowSums(across(all_of(attitudenum_vars)), na.rm = TRUE))
attitude_median <- median(surv$ATTITUDEnum, na.rm = TRUE)
surv <- surv %>%
  mutate(ATTITUDEbin = if_else(ATTITUDEnum > attitude_median, 1L, 0L))


# Calculate number of favorable, neutral, and unfavorable responses
surv <- surv %>%
  rowwise() %>%
  mutate(
    FAVnum     = sum(c_across(all_of(attitude_ord_vars)) == "Favorable", na.rm = TRUE),
    NEUTRALnum = sum(c_across(all_of(attitude_ord_vars)) == "Neutral", na.rm = TRUE),
    UNFAVnum   = sum(c_across(all_of(attitude_ord_vars)) == "Unfavorable", na.rm = TRUE)) %>%
  ungroup()

# Median thresholds
fav_median     <- median(surv$FAVnum, na.rm = TRUE)
neutral_median <- median(surv$NEUTRALnum, na.rm = TRUE)
unfav_median   <- median(surv$UNFAVnum, na.rm = TRUE)

# Create binary splits
surv <- surv %>%
  mutate(
    FAVbin     = if_else(FAVnum > fav_median, 1L, 0L),
    NEUTRALbin = if_else(NEUTRALnum > neutral_median, 1L, 0L),
    UNFAVbin   = if_else(UNFAVnum > unfav_median, 1L, 0L))

# Optional: review counts
table(surv$FAVbin)
table(surv$NEUTRALbin)
table(surv$UNFAVbin)
fav_median    
neutral_median
unfav_median  
summary(surv$ATTITUDEnum)
table(surv$ATTITUDEbin)
attitude_median

```

# PRACTICES
#### Data Manipulation
```{r, echo = TRUE}

#--------- Options Selected / Sources used -----------
surv <- surv %>%
  mutate(
    nCOUNTIES = case_when(
      is.na(COUNTIES) ~ NA_integer_,
      TRUE ~ str_count(COUNTIES, ",") + 1))

```

#### Descriptive Statistics
```{r, echo = TRUE}

survsum  <- sumFUN(surv)
survuni  <- uniFUN(surv)
survsum <- sumFUN(surv)
survuni <- uniFUN(surv)

survsum$MOREnum
survsum$NEUTRALnum
survsum$UNFAVnum

survsum$PPE
survsum$PPETIME
survsum$CONTACT
survsum$FIELD
survsum$COLLECT
survsum$HANDLE
survsum$STATE
survsum$COUNTIES

#------ Count of Options ------------
survsum$nCOUNTIES
survuni$nCOUNTIES


```

#### Variable Processing
```{r}

### Variable Processing
surv <- surv %>%
  mutate(
    nCOUNTIESbin = if_else(is.na(COUNTIES), NA_integer_, str_count(COUNTIES, ",") + 1L),
    COLLECTbin  = if_else(COLLECT == "Yes", 1L, if_else(COLLECT == "No", 0L, NA_integer_)),
    HANDLEbin   = if_else(HANDLE == "Yes", 1L, if_else(HANDLE == "No", 0L, NA_integer_)),
    PPEbin      = if_else(PPE == "Yes", 0L, if_else(PPE == "No", 1L, NA_integer_)),  # 1 = no PPE use
    FIELDbin    = if_else(FIELD >= 50, 1L, 0L),
    STATEbin    = case_when(
      STATE == "Dead" ~ 0L,
      STATE %in% c("Alive - Not Sedated", "Alive - Sedated") ~ 1L,
      TRUE ~ NA_integer_),
    CONTACTbin = case_when(
      CONTACT %in% c("Daily", "Weekly", "Monthly") ~ 1L,
      CONTACT %in% c("Rarely", "Never") ~ 0L,
      TRUE ~ NA_integer_))

# Apply median split for SOURCE and COUNTIES
counties_median <- median(surv$nCOUNTIES, na.rm = TRUE)
surv <- surv %>%
  mutate(
    COUNTIESbin = if_else(nCOUNTIES > counties_median, 1, 0))

# Compute PRACscore as sum of binary risk-related behaviors
surv <- surv %>%
  mutate(
    PRACnum = rowSums(across(c(CONTACTbin, FIELDbin, COLLECTbin, HANDLEbin, COUNTIESbin, PPEbin)), na.rm = TRUE))
prac_median <- median(surv$PRACnum, na.rm = TRUE)

surv <- surv %>%
  mutate(PRACbin = if_else(PRACnum >= prac_median, 1L, 0L))

# Tabulate variables
table(surv$PRACnum)
table(surv$PRACbin)
prac_median
counties_median
survsum$CONTACTbin
table(surv$CONTACTbin)
table(surv$nCOUNTIESbin)
table(surv$COUNTIESbin)
table(surv$COLLECTbin)
table(surv$HANDLEbin)
table(surv$PPEbin)
table(surv$FIELDbin)
table(surv$STATEbin)

```

# INTEREST
#### Data Manipulation
```{r, echo = TRUE}

#--------- Options Selected / Sources used -----------
surv <- surv %>%
  mutate(
    nSOURCE = case_when(
      is.na(SOURCE) ~ NA_integer_,
      TRUE ~ str_count(SOURCE, ",") + 1),
        nSOURCE = case_when(
      is.na(TOPICS) ~ NA_integer_,
      TRUE ~ str_count(TOPICS, ",") + 1),
        nFREEINFO = case_when(
      is.na(FREEINFO) ~ NA_integer_,
      TRUE ~ str_count(FREEINFO, ",") + 1))

edu_forward <- c("EDREQ", "INFO")
edu_reverse <- c("HANDSON")
surv <- surv %>%
  mutate(across(all_of(c(edu_forward, edu_reverse)), as.character))
surv <- surv %>%
  mutate(across(all_of(edu_forward),
                ~ case_when(
                  . %in% c("Strongly Agree", "Agree")            ~ "More",
                  . == "Neutral"                                 ~ "Neutral",
                  . %in% c("Disagree", "Strongly Disagree")      ~ "Less",
                  TRUE                                           ~ NA_character_),
                .names = "{.col}edu"))
surv <- surv %>%
  mutate(across(all_of(edu_reverse),
                ~ case_when(
                  . %in% c("Strongly Disagree", "Disagree")      ~ "More",
                  . == "Neutral"                                 ~ "Neutral",
                  . %in% c("Agree", "Strongly Agree")            ~ "Less",
                  TRUE                                           ~ NA_character_),
                .names = "{.col}edu"))
surv <- surv %>%
  mutate(across(ends_with("edu"),
                ~ factor(.x, levels = c("Less", "Neutral", "More"), ordered = TRUE)))

table(surv$HANDSONedu)
table(surv$EDREQedu)
table(surv$INFOedu)

```
#### Descriptive Statistics
```{r, echo = TRUE}

survsum  <- sumFUN(surv)
survuni  <- uniFUN(surv)
survsum <- sumFUN(surv)
survuni <- uniFUN(surv)

survsum$ACCESS
survsum$INTEREST
survsum$FREEINFOfill
survsum$SOURCEfill
survsum$TOPICSfill
survsum$INTERESTcert


# ------------ Count of selected options -----------------
survsum$nFREEINFO
survuni$nFREEINFO
survsum$nTOPICS
survuni$nTOPICS
survuni$nSOURCE
survsum$nSOURCE
survsum$noSOURCE

# ------------ Other -----------------
survsum$othFREEINFO
survsum$othTOPICS
survsum$othSOURCE

```
### Variable Processing
```{r}

# 1. Recode Likert-type items to 0/1/2
edu_likert_vars <- c("EDREQedu","HANDSONedu")
edu_likert_varsrev <- c("INFOedu")
surv <- surv %>%
  mutate(across(all_of(edu_likert_vars),
                ~ recode(.x,
                         "More"    = 2L,
                         "Neutral" = 1L,
                         "Less"    = 0L),
                .names = "{.col}num"))
edu_likert_vars <- c("EDREQedu", "INFOedu", "HANDSONedu")
surv <- surv %>%
  mutate(across(all_of(edu_likert_varsrev),
                ~ recode(.x,
                         "More"    = 0L,
                         "Neutral" = 1L,
                         "Less"    = 2L),
                .names = "{.col}num"))

# 3. Compute counts of options selected
surv <- surv %>%
  mutate(
    nFREEINFO = if_else(is.na(FREEINFO), NA_integer_, str_count(FREEINFO, ",") + 1L),
    nTOPICS   = if_else(is.na(TOPICS),   NA_integer_, str_count(TOPICS, ",") + 1L),
    nSOURCE   = if_else(is.na(SOURCE),   NA_integer_, str_count(SOURCE, ",") + 1L))

# 4. Compute median splits
freeinfo_median <- median(surv$nFREEINFO, na.rm = TRUE)
topics_median   <- median(surv$nTOPICS, na.rm = TRUE)
source_median   <- median(surv$nSOURCE, na.rm = TRUE)

# 5. Binary indicators for selected info sources
surv <- surv %>%
  mutate(
    FREEINFOedu = if_else(nFREEINFO >= freeinfo_median, 1L, 0L),
    TOPICSedu   = if_else(nTOPICS   >= topics_median,   1L, 0L),
    SOURCEedu   = if_else(nSOURCE   >= source_median,   1L, 0L),
    ACCESSedu = case_when(
      ACCESS == "Yes" ~ 1L,
      ACCESS == "No"  ~ 0L,
      TRUE ~ NA_integer_),
    INTERESTedu = case_when(
      INTEREST == "Yes"               ~ 2L,
      INTEREST == "Unsure"      ~ 1L,
      INTEREST == "No"                ~ 0L,
      TRUE                            ~ NA_integer_))

# 6. Create composite INTEREST score
interest_components <- c("FREEINFOedu", "TOPICSedu", "SOURCEedu", "ACCESSedu", "INTERESTedu",
                         "HANDSONedunum", "INFOedunum", "EDREQedunum")

surv <- surv %>%
  mutate(INFOnum = rowSums(across(all_of(interest_components)), na.rm = TRUE))
info_median <- median(surv$INFOnum, na.rm = TRUE)
surv <- surv %>%
  mutate(INFObin = if_else(INFOnum > info_median, 1L, 0L))


table(surv$nFREEINFO)
table(surv$nTOPICS)
table(surv$INTERESTedu)
table(surv$TOPICSedu)
table(surv$nSOURCE)
table(surv$SOURCEedu)
table(surv$INFOnum)
table(surv$INFObin)
freeinfo_median
topics_median
source_median
info_median

```

## Cronbach's Alpha Calculations
```{r}

require(psych)
#------------------- KNOWLEDGE -------------------
knowledge_items <- surv %>%
  select(ends_with("corr")) %>%
  as.data.frame()

knowledge_alpha <- psych::alpha(knowledge_items)
cat("🔍 Knowledge Cronbach's Alpha:\n")
print(knowledge_alpha$total$raw_alpha)
print(knowledge_alpha)

#------------------- ATTITUDE -------------------
attitude_ord_vars <- c("CWDALatt", "BATSatt", "PPEREQatt", "EHDatt", "POPPLANatt", "SURVEYatt",
                       "VACCINEatt", "PREVALatt", "DIVERSEatt", "CONSEQatt", "CLIMATEatt",
                       "EDREQatt", "INFOatt", "DARWINatt", "POPREDatt", "HANDSONatt")

attitudenum_vars <- paste0(attitude_ord_vars, "num")
attitude_items <- surv %>%
  select(all_of(attitudenum_vars)) %>%
  as.data.frame()

attitude_alpha <- psych::alpha(attitude_items)
cat("\n💭 Attitude Cronbach's Alpha:\n")
print(attitude_alpha$total$raw_alpha)
print(attitude_alpha)

#------------------- PRACTICE -------------------
practice_vars <- c("CONTACTbin", "FIELDbin", "COLLECTbin", "HANDLEbin", "COUNTIESbin", "PPEbin")
practice_items <- surv %>%
  select(all_of(practice_vars)) %>%
  as.data.frame()

practice_alpha <- psych::alpha(practice_items)
cat("\n🛠 Practice Cronbach's Alpha:\n")
print(practice_alpha$total$raw_alpha)
print(practice_alpha)

#------------------- INTEREST -------------------
interest_vars <- c("FREEINFOedu", "TOPICSedu", "SOURCEedu", "ACCESSedu", "INTERESTedu",
                   "HANDSONedunum", "INFOedunum", "EDREQedunum")

interest_items <- surv %>%
  select(all_of(interest_vars)) %>%
  as.data.frame()

interest_alpha <- psych::alpha(interest_items, check.keys = TRUE)
cat("\n📘 Interest Cronbach's Alpha:\n")
print(interest_alpha$total$raw_alpha)
print(interest_alpha)

```


# EXPORTS
### Data Frames
```{r}
#| include: false

###### Processed Responses ######
oup = file.path(analyses, "outputs")
write.csv(surv, file.path(oup, "processedsurv.csv"), row.names = FALSE)

```



# References
```{r}
# 
# RStudio.Version() 
# version$version.string
# citation()
# 
# #### to display the packages within the .qmd without creating another .bib ####
# knitr::write_bib(sub("^package:", "", grep("package", search(), value=TRUE)), file='')
# 
```

