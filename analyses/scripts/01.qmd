---
title: "Descriptive Stats and Survey Processing"
date: "`r Sys.Date()`"
output: 
  html_document:
    toc: true
    toc_depth: 3
    toc_float:
      collapsed: false
      smooth_scroll: true
    number_sections: true
    fig_caption: true
    theme: flatly
    css: styles.css
    highlight: tango
    df_print: paged
    code_folding: hide
    self_contained: true
    mathjax: default
fontsize: 12pt
mainfont: "Times New Roman"
linestretch: 1.5
---

# Initialization
```{r}
#| include: false
css_text <- "
/* Basic page settings */
body {
  font-family: 'Times New Roman', serif;
  font-size: 12pt;
  line-height: 1.5;
  color: #000000;
  background: #ffffff;
  margin: 2em;
}
/* Styled table (scientific, clean) */
.styled-table {
  width: 100%;
  border-collapse: collapse;
  margin: 1em 0;
  font-size: 12pt;
  color: #000;
}
.styled-table thead {
  background-color: #f9f9f9;
  font-weight: bold;
  border-bottom: 2px solid black;
}
.styled-table th, .styled-table td {
  border: 1px solid #ddd;
  padding: 8px 12px;
  text-align: center;
}
.styled-table tbody tr:nth-child(even) {
  background-color: #f2f2f2;
}
.styled-table tbody tr:hover {
  background-color: #f0f0f0;
}
/* Code block formatting */
pre, code {
  background-color: #f8f8f8;
  border: 1px solid #e1e1e1;
  font-size: 11pt;
  font-family: Consolas, monospace;
  padding: 6px;
  border-radius: 4px;
  overflow-x: auto;
}
/* Caption styling */
caption, figcaption {
  font-size: 11pt;
  font-style: italic;
  text-align: center;
  margin-top: 0.5em;
}
/* Headings */
h1, h2, h3, h4 {
  color: #222;
  font-weight: bold;
}
"
# Write the CSS string to the styles.css file
writeLines(css_text, "styles.css")

```

### Packages
```{r include=FALSE}

require(dplyr)
require(sf)
require(sp)
require(tidyverse)
require(tidyterra)
require(terra)
require(ggplot2)
require(knitr)
require(gt)
require(scales)
require(rlang)
require(zipcodeR)
require(tidyr)
require(stringr)
require(writexl)
require(tibble)
require(janitor)
require(openxlsx)

```

### Data Import
```{r}
#| echo: true
# setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
base = normalizePath(file.path("..", ".."), mustWork = FALSE)  
analyses = file.path(base, "analyses")
inp = file.path(analyses, "inputs")
surv = read.csv(file.path(inp, "progover60.csv"))
prog = read.csv(file.path(inp, "prog.csv"))

#------------ PROGRESS grouped by 10% intervals --------------
prog$PROG = prog$PROG
intFUN <- function(df, column = "PROG") {
  require(dplyr)

  df %>%
    mutate(
      prog_bin = cut(
        !!sym(column),
        breaks = seq(0, 100, by = 10),
        include.lowest = TRUE,
        right = FALSE,
        labels = paste0(seq(0, 90, 10), "-", seq(10, 100, 10), "%")
      )
    ) %>%
    count(prog_bin, name = "Respondent_Count") %>%
    arrange(prog_bin)
 }
TPROG = intFUN(prog)
TPROG
PROG = intFUN(surv)
PROG

surv <- surv %>%
  filter(PROG >= 70)

```
## Functions
```{r}
#| echo: true

#----------- Basic Summary Stats for Continuous/Categorical -----------------

sumFUN <- function(df) {
  summary_list <- list()
  
  for (colname in names(df)) {
    column <- df[[colname]]
    
    if (is.numeric(column)) {
 # Continuous variable summary
      summary_list[[colname]] <- tibble::tibble(
        Variable = colname,
        Type = "Continuous",
        N = sum(!is.na(column)),
        Mean = mean(column, na.rm = TRUE),
        Median = median(column, na.rm = TRUE),
        SD = sd(column, na.rm = TRUE),
        Min = min(column, na.rm = TRUE),
        Max = max(column, na.rm = TRUE)
      )
    } else if (is.factor(column) || is.character(column) || is.logical(column)) {
 # Categorical variable summary
      freq_table <- as.data.frame(table(column, useNA = "ifany"))
      names(freq_table) <- c("Level", "Count")
      freq_table$Variable <- colname
      freq_table$Proportion <- freq_table$Count / sum(freq_table$Count)
      freq_table <- freq_table[, c("Variable", "Level", "Count", "Proportion")]
      summary_list[[colname]] <- freq_table
    }
  }
  return(summary_list)
}

#----------------- Response Count (for numeric columns) -------------------
uniFUN <- function(df, columns = NULL) {
  if (is.null(columns)) {
    columns <- names(df)
  }
  list <- list()
  for (col in columns) {
    if (col %in% names(df)) {
      list[[col]] <- df %>%
        count(!!sym(col), name = "Count") %>%
        arrange(desc(Count))
    } else {
      warning(paste("Column", col, "not found in data."))
    }
  }
  return(list)
}

```

# QUALTRICS METADATA
#### Data Manipulation
```{r, echo = TRUE}

#--------- Converting DURATION to minutes -----------
surv$DURATIONmin <- surv$DURATION / 60


#------------ PROGRESS grouped by 10% intervals --------------
surv$PROGint = surv$PROG
intFUN <- function(df, column = "PROG") {
  require(dplyr)

  df %>%
    mutate(
      prog_bin = cut(
        !!sym(column),
        breaks = seq(0, 100, by = 10),
        include.lowest = TRUE,
        right = FALSE,
        labels = paste0(seq(0, 90, 10), "-", seq(10, 100, 10), "%")
      )
    ) %>%
    count(prog_bin, name = "Respondent_Count") %>%
    arrange(prog_bin)
 }

PROGint = intFUN(surv)
PROGint

#---------- Duration (min) grouped by 10 minute intervals -----------
max_min <- ceiling(max(surv$DURATION, na.rm = TRUE) / 10) * 10
breaks <- seq(0, max_min, by = 10)
labels <- paste0(head(breaks, -1), "-", tail(breaks, -1), " min")
surv$DURATIONint <- cut(
  surv$DURATION,
  breaks = breaks,
  right = FALSE,
  include.lowest = TRUE,
  labels = labels
)
DURint <- surv %>%
  count(DURATIONint, name = "Respondent_Count") %>%
  arrange(DURATIONint)
print(DURint)
surv <- surv %>% select(-DURATIONint)


```


#### Descriptive Statistics 
```{r, echo = TRUE}

survsum = sumFUN(surv)
survuni = uniFUN(surv)
survsum = sumFUN(surv)
survuni = uniFUN(surv)

survsum$DURATION
survsum$PROGRESS

survsum$FINISHED
survsum$QSCORE
survsum$RECDATE

#-------------- RESPONSE COUNT ---------------
survuni$PROGRESS
survuni$DURATION

```



# DEMOGRAPHICS
#### Data Manipulation
```{r, echo = TRUE}

#--------- Calculating Age -----------
surv$AGEnum = 2024 - surv$DOB
surv$AGE <- 2024 - surv$DOB
surv$AGEint <- cut(
  surv$AGE,
  breaks = c(0, 29, 39, 49, 59, Inf),
  labels = c("20–29", "30–39", "40–49", "50–59", "60+"),
  right = TRUE,
  include.lowest = TRUE
)
age_summary <- surv %>%
  dplyr::count(AGEint, name = "Count") %>%
  dplyr::mutate(
    `Proportion (%)` = round(Count / sum(Count) * 100, 1)
  )
print(age_summary)

#--------- Adding Respondent County -----------
zip_info <- zipcodeR::zip_code_db %>%
  select(zipcode, county, state)
surv <- surv %>%
  mutate(ZIPCODE = as.character(ZIPCODE)) %>%
  left_join(zip_info, by = c("ZIPCODE" = "zipcode"))
surv <- surv %>% select(-state)
names(surv)[names(surv) == "county"] <- "LOCATION"

```

#### Descriptive Statistics
```{r, echo = TRUE}

survsum = sumFUN(surv)
survuni = uniFUN(surv)
survsum = sumFUN(surv)
survuni = uniFUN(surv)

survsum$AGEnum
survsum$RACE
survsum$ETHNICITY
survsum$GENDER
survsum$INCOME
survsum$EDUCATION
survsum$DEGREE
survsum$TWS
survsum$COURSE
survsum$COURSETIME
survsum$SELFTITLE
survsum$AFFILIATEfill
survsum$BIOTIME
survsum$ACTIVITYfill
survsum$LICENSE

#-------------- Count / Category ---------------
survuni$AGEnum
survuni$DOB

#-------------- Other ---------------
survsum$othACTIVITY
survsum$othAFFILIATE

```
### Variable Processing
```{r, echo = TRUE}

surv <- surv %>%
  mutate(
    AGEbin = if_else(AGEnum <= median(2024 - DOB, na.rm = TRUE), 0L, 1L),
    RACEbin = case_when(
      RACE == "White" ~ 1L,
      RACE %in% c("Asian", "Black or African American", "Other") ~ 0L,
      RACE == "I prefer Not to answer" ~ NA_integer_,
      TRUE ~ NA_integer_),
    GENDERbin = case_when(
      GENDER == "Male" ~ 1L,
      GENDER == "Female" ~ 0L,
      GENDER %in% c("Other", "I prefer Not to answer") ~ NA_integer_,
      TRUE ~ NA_integer_),
    INCOMEbin = if_else(INCOME > 62027, 1L, 0L),
    EDUCATIONbin = case_when(
      EDUCATION %in% c("College Graduate/BA or BS (4-year degree)", "Graduate or Professional School") ~ 1L,
      EDUCATION %in% c("Did Not graduate high school/No GED", "High school graduate/GED",
                       "Some College/AA or AS (2-year degree)", "Technical/Vocational School") ~ 0L,
      TRUE ~ NA_integer_),
    DEGREEbin     = if_else(DEGREE == "Yes", 1L, if_else(DEGREE == "No", 0L, NA_integer_)),
    TWSbin        = if_else(TWS == "Yes", 1L, if_else(TWS == "No", 0L, NA_integer_)),
    COURSEbin     = if_else(COURSE == "Yes", 1L, if_else(COURSE == "No", 0L, NA_integer_)),
    SELFTITLEbin  = if_else(SELFTITLE == "Yes", 1L, if_else(SELFTITLE == "No", 0L, NA_integer_)),
    LICENSEbin    = if_else(LICENSE == "Yes", 1L, if_else(LICENSE == "No", 0L, NA_integer_)),
    COURSETIMEbin = case_when(
      COURSETIME %in% c("<5 years", "5-10 years") ~ 1L,
      COURSETIME == ">10 years" ~ 0L,
      TRUE ~ NA_integer_),
    BIOTIMEbin = case_when(
      BIOTIME %in% c("10-20 years", ">20 years") ~ 1L,
      BIOTIME %in% c("<1 year", "1-5 years", "5-10 years") ~ 0L,
      TRUE ~ NA_integer_))

table(surv$AGEbin)
table(surv$AGEint)
table(surv$RACEbin) 
table(surv$GENDERbin) 
table(surv$INCOMEbin) 
table(surv$EDUCATIONbin) 
table(surv$DEGREEbin) 
table(surv$TWSbin)
table(surv$COURSEbin) 
table(surv$SELFTITLEbin) 
table(surv$LICENSEbin) 
table(surv$COURSETIMEbin) 
table(surv$BIOTIMEbin) 

```


# KNOWLEDGE
#### Data Manipulation
```{r, echo = TRUE}

# PIGS, BRUCE, CWD, FLUAL, FLU, COVID, COVIDSPILL, RABIESAL, RABIES, TURKEY
answers <- list(
  PIGS       = "True",       
  BRUCE      = "False",      
  CWD        = "False",      
  FLUAL      = "True",       
  FLU        = "False",      
  COVID      = "True",       
  COVIDSPILL = "False",      
  RABIESAL   = "False",      
  RABIES     = "Bites",      
  TURKEY     = "Incinerate")

for (q in names(answers)) {
  correct <- tolower(str_trim(answers[[q]]))
  surv[[paste0(q, "corr")]] <- ifelse(
    tolower(str_trim(as.character(surv[[q]]))) == correct, 1, 0)
  surv[[paste0(q, "cert")]] <- ifelse(
    str_to_lower(str_trim(as.character(surv[[q]]))) != "i don't know" & !is.na(surv[[q]]),
    1, 0)
}

surv <- surv %>%
  rowwise() %>%
  mutate(
    CORRECTnum = sum(c_across(ends_with("corr")), na.rm = TRUE),
    CORRECTnum = sum(c_across(ends_with("cert")), na.rm = TRUE)
  ) %>%
  ungroup()

```

#### Descriptive Statistics
```{r, echo = TRUE}

survsum = sumFUN(surv)
survuni = uniFUN(surv)
survsum = sumFUN(surv)
survuni = uniFUN(surv)

survsum$PIGS
survsum$BRUCE
survsum$CWD
survsum$FLUAL
survsum$COVID
survsum$COVIDSPILL
survsum$RABIESAL
survsum$RABIES
survsum$TURKEY

#------------ CORRECT -----------
survsum$PIGScorr
survsum$BRUCEcorr
survsum$CWDcorr
survsum$FLUALcorr
survsum$COVIDcorr
survsum$COVIDSPILLcorr
survsum$RABIEScorr
survsum$RABIESALcorr
survsum$TURKEYcorr


#------------ CERTAIN -----------
survsum$PIGScert
survsum$BRUCEcert
survsum$CWDcert
survsum$FLUALcert
survsum$COVIDcert
survsum$COVIDSPILLcert
survsum$RABIEScert
survsum$RABIESALcert
survsum$TURKEYcert

#------------ TOTAL -----------
survsum$CORRRECTnum
survsum$CERTAINnum

```

#### Variable Processing
```{r, echo = TRUE}

surv <- surv %>%
  mutate(across(all_of(names(answers)), as.character)) %>%
  mutate(across(all_of(names(answers)), str_trim)) %>%
  mutate(across(all_of(names(answers)), tolower)) %>%
  rowwise() %>%
  mutate(
    across(all_of(names(answers)), 
           .fns = list(
             corr = ~ as.integer(. == tolower(answers[[cur_column()]])),
             cert = ~ as.integer(. != "i don't know" & !is.na(.))
           ),
           .names = "{.col}{.fn}"),
    CORRRECTnum = sum(c_across(ends_with("corr")), na.rm = TRUE),
    CERTAINnum = sum(c_across(ends_with("cert")), na.rm = TRUE)
  ) %>%
  ungroup() %>%
  mutate(
    CORRRECTmed = if_else(CORRRECTnum > median(CORRRECTnum, na.rm = TRUE), 1, 0),
    CORRRECTavg = if_else(CORRRECTnum >   mean(CORRRECTnum, na.rm = TRUE), 1, 0),
    CERTAINmed = if_else(CERTAINnum > median(CERTAINnum, na.rm = TRUE), 1, 0),
    CERTAINavg = if_else(CERTAINnum >   mean(CERTAINnum, na.rm = TRUE), 1, 0))

 CORRRECTmed   <- median(surv$CORRRECTnum, na.rm = TRUE)
 CORRRECTavg   <-   mean(surv$CORRRECTnum, na.rm = TRUE)
 CERTAINmed    <- median(surv$CERTAINnum, na.rm = TRUE)
 CERTAINavg    <- mean(surv$CERTAINnum, na.rm = TRUE)
CORRRECTmed 
 CORRRECTavg 
 CERTAINmed  
 CERTAINavg  


table(surv$CORRRECTmed)
table(surv$CORRRECTavg)
table(surv$CERTAINmed)
table(surv$CERTAINavg)
table(surv$CORRRECTnum)
table(surv$CERTAINnum )

```


# ATTITUDES
#### Data Manipulation
```{r, echo = TRUE}

#--------- More , Neutral , Less -----------

# Define variable groups
attitudeinvert <- c("DARWIN","POPRED","HANDSON")  # Disagree = more concern
attitude <- c("CWDAL","BATS","PPEREQ","EHD","POPPLAN","SURVEY",
              "VACCINE","PREVAL","DIVERSE","CONSEQ","CLIMATE","EDREQ","INFO")  # Agree = more concern

# Recode responses into "More", "Neutral", "Less"
surv <- surv %>%
  mutate(across(all_of(attitude), 
                .fns = ~ case_when(
                  . %in% c("Strongly Agree", "Agree") ~ "More",
                  . %in% c("Disagree", "Strongly Disagree") ~ "Less",
                  . == "Neutral" ~ "Neutral",
                  TRUE ~ NA_character_),
                .names = "{.col}ord")) %>%
  mutate(across(all_of(attitudeinvert),
                .fns = ~ case_when(
                  . %in% c("Disagree", "Strongly Disagree") ~ "More",
                  . %in% c("Agree", "Strongly Agree") ~ "Less",
                  . == "Neutral" ~ "Neutral",
                  TRUE ~ NA_character_),
                .names = "{.col}ord"))


table(surv$CWDALord)
table(surv$HANDSONord)
table(surv$BATSord)
table(surv$PPEREQord)
table(surv$EHDord)
table(surv$DARWINord)
table(surv$POPREDord)
table(surv$POPPLANord)
table(surv$SURVEYord)
table(surv$VACCINEord)
table(surv$PREVALord)
table(surv$DIVERSEord)
table(surv$CONSEQord)
table(surv$CLIMATEord)
```

#### Descriptive Statistics
```{r, echo = TRUE}

survsum = sumFUN(surv)
survuni = uniFUN(surv)
survsum = sumFUN(surv)
survuni = uniFUN(surv)

#----------- 5-level likert -----------------
survsum$CWDAL5
survsum$BATS5
survsum$PPEREQ5
survsum$EHD5
survsum$DARWIN5
survsum$POPRED5
survsum$POPPLAN5
survsum$SURVEY5
survsum$VACCINE5
survsum$PREVAL5
survsum$DIVERSE5
survsum$CONSEQ5
survsum$CLIMATE5

#------------ 3 levels ---------------
survsum$CWDALord
survsum$BATSord
survsum$PPEREQord
survsum$EHDord
survsum$DARWINord
survsum$POPREDord
survsum$POPPLANord
survsum$SURVEYord
survsum$VACCINEord
survsum$PREVALord
survsum$DIVERSEord
survsum$CONSEQord
survsum$CLIMATEord

```
#### Variable Processing
```{r, echo = TRUE}
attitude_ord_vars <- c("PREVALord", "DIVERSEord", "CONSEQord", "CLIMATEord", "EHDord", "BATSord", "CWDALord",
                       "PPEREQord", "SURVEYord", "VACCINEord", "POPPLANord", "EDREQord", "INFOord", "HANDSONord",
                       "DARWINord", "POPREDord")

surv <- surv %>%
  rowwise() %>%
  mutate(
    MOREnum    = sum(c_across(all_of(attitude_ord_vars)) == "More", na.rm = TRUE) * 1,
    NEUTRALnum = sum(c_across(all_of(attitude_ord_vars)) == "Neutral", na.rm = TRUE) * 1,
    LESSnum    = sum(c_across(all_of(attitude_ord_vars)) == "Less", na.rm = TRUE) * 1
  ) %>%
  ungroup()


table(surv$MOREnum)
table(surv$NEUTRALnum)
table(surv$LESSnum)

# Calculate medians
more_median    <- median(surv$MOREnum, na.rm = TRUE)
neutral_median <- median(surv$NEUTRALnum, na.rm = TRUE)
less_median    <- median(surv$LESSnum, na.rm = TRUE)

# Create above/below median binary variables
surv <- surv %>%
  mutate(
    MOREbin    = if_else(MOREnum > more_median, 1L, 0L),
    NEUTRALbin = if_else(NEUTRALnum > neutral_median, 1L, 0L),
    LESSbin    = if_else(LESSnum > less_median, 1L, 0L))

more_median    
neutral_median 
less_median    
table(surv$MOREbin   )
table(surv$NEUTRALbin)
table(surv$LESSbin   )
table(surv$MOREnum   )
table(surv$NEUTRALnum)
table(surv$LESSnum   )

```



# PRACTICES
#### Data Manipulation
```{r, echo = TRUE}

#--------- Options Selected / Sources used -----------
surv <- surv %>%
  mutate(
    nCOUNTIES = case_when(
      is.na(COUNTIES) ~ NA_integer_,
      TRUE ~ str_count(COUNTIES, ",") + 1))

```

#### Descriptive Statistics
```{r, echo = TRUE}

survsum  <- sumFUN(surv)
survuni  <- uniFUN(surv)
survsum <- sumFUN(surv)
survuni <- uniFUN(surv)

survsum$MOREnum
survsum$NEUTRALnum
survsum$LESSnum

survsum$PPE
survsum$PPETIME
survsum$CONTACT
survsum$FIELD
survsum$COLLECT
survsum$HANDLE
survsum$STATE
survsum$COUNTIES

#------ Count of Options ------------
survsum$nCOUNTIES
survuni$nCOUNTIES


```

#### Variable Processing
```{r}
### Variable Processing
surv <- surv %>%
  mutate(
    nCOUNTIESbin = if_else(is.na(COUNTIES), NA_integer_, str_count(COUNTIES, ",") + 1L),
    COLLECTbin  = if_else(COLLECT == "Yes", 1L, if_else(COLLECT == "No", 0L, NA_integer_)),
    HANDLEbin   = if_else(HANDLE == "Yes", 1L, if_else(HANDLE == "No", 0L, NA_integer_)),
    PPEbin      = if_else(PPE == "Yes", 0L, if_else(PPE == "No", 1L, NA_integer_)),  # 1 = no PPE use
    FIELDbin    = if_else(FIELD >= 50, 1L, 0L),
    STATEbin    = case_when(
      STATE == "Dead" ~ 0L,
      STATE %in% c("Alive - Not Sedated", "Alive - Sedated") ~ 1L,
      TRUE ~ NA_integer_),
    CONTACTbin = case_when(
      CONTACT %in% c("Daily", "Weekly", "Monthly") ~ 1L,
      CONTACT %in% c("Rarely", "Never") ~ 0L,
      TRUE ~ NA_integer_))

# Apply median split for SOURCE and COUNTIES
counties_median <- median(surv$nCOUNTIES, na.rm = TRUE)
surv <- surv %>%
  mutate(
    COUNTIESbin = if_else(nCOUNTIES > counties_median, 1, 0))

# Compute PRACscore as sum of binary risk-related behaviors
surv <- surv %>%
  mutate(
    PRACnum = rowSums(across(c(CONTACTbin, FIELDbin, COLLECTbin, HANDLEbin, COUNTIESbin, PPEbin)), na.rm = TRUE))
prac_median <- median(surv$PRACnum, na.rm = TRUE)

surv <- surv %>%
  mutate(PRACbin = if_else(PRACnum >= prac_median, 1L, 0L))

# Tabulate variables
table(surv$PRACnum)
table(surv$PRACbin)
prac_median
counties_median
survsum$CONTACTbin
table(surv$CONTACTbin)
table(surv$nCOUNTIESbin)
table(surv$COUNTIESbin)
table(surv$COLLECTbin)
table(surv$HANDLEbin)
table(surv$PPEbin)
table(surv$FIELDbin)
table(surv$STATEbin)

```

# INTEREST
#### Data Manipulation
```{r, echo = TRUE}

#--------- Options Selected / Sources used -----------
surv <- surv %>%
  mutate(
    nSOURCE = case_when(
      is.na(SOURCE) ~ NA_integer_,
      TRUE ~ str_count(SOURCE, ",") + 1),
        nSOURCE = case_when(
      is.na(TOPICS) ~ NA_integer_,
      TRUE ~ str_count(TOPICS, ",") + 1),
        nFREEINFO = case_when(
      is.na(FREEINFO) ~ NA_integer_,
      TRUE ~ str_count(FREEINFO, ",") + 1))

```
#### Descriptive Statistics
```{r, echo = TRUE}

survsum  <- sumFUN(surv)
survuni  <- uniFUN(surv)
survsum <- sumFUN(surv)
survuni <- uniFUN(surv)

survsum$ACCESS
survsum$INTEREST
survsum$FREEINFOfill
survsum$SOURCEfill
survsum$TOPICSfill
survsum$INTERESTcert


# ------------ Count of selected options -----------------
survsum$nFREEINFO
survuni$nFREEINFO
survsum$nTOPICS
survuni$nTOPICS
survuni$nSOURCE
survsum$nSOURCE
survsum$noSOURCE

# ------------ Other -----------------
survsum$othFREEINFO
survsum$othTOPICS
survsum$othSOURCE

```


#### Variable Processing
```{r, echo = TRUE}

### Calculate medians for binarization thresholds
freeinfo_median <- median(surv$nFREEINFO, na.rm = TRUE)
topics_median   <- median(surv$nTOPICS, na.rm = TRUE)
source_median   <- median(surv$nSOURCE, na.rm = TRUE)
info_median     <- NULL  # placeholder; defined after INFOnum is created

surv <- surv %>%
  mutate(
    nFREEINFO   = if_else(is.na(FREEINFO), NA_integer_, str_count(FREEINFO, ",") + 1L),
    nTOPICS     = if_else(is.na(TOPICS), NA_integer_, str_count(TOPICS, ",") + 1L),
    nSOURCE     = if_else(is.na(SOURCE), NA_integer_, str_count(SOURCE, ",") + 1L)
  )

freeinfo_median <- median(surv$nFREEINFO, na.rm = TRUE)
topics_median   <- median(surv$nTOPICS, na.rm = TRUE)
source_median   <- median(surv$nSOURCE, na.rm = TRUE)


surv <- surv %>%
  mutate(
    noSOURCEbin = case_when(
      is.na(SOURCE) ~ NA_real_,
      str_detect(SOURCE, fixed("I have Not looked for health information")) ~ 0,
      TRUE ~ 1
    ),
    FREEINFObin = if_else(nFREEINFO >= freeinfo_median, 1L, 0L),
    TOPICSbin   = if_else(nTOPICS >= topics_median, 1L, 0L),
    SOURCEbin   = if_else(nSOURCE >= source_median, 1L, 0L),
    ACCESSbin   = if_else(ACCESS == "Yes", 1L,
                   if_else(ACCESS == "No", 0L, NA_integer_)),
    INTERESTbin = case_when(
      INTEREST == "Yes" ~ 1L,
      INTEREST %in% c("No", "I don't know") ~ 0L,
      TRUE ~ NA_integer_
    ),
    INFOnum = rowSums(across(c(FREEINFObin, TOPICSbin, SOURCEbin, ACCESSbin, INTERESTbin)), na.rm = TRUE)
  )
# Compute median of total interest score
info_median <- median(surv$INFOnum, na.rm = TRUE)

# Classify overall interest
surv <- surv %>%
  mutate(INFObin = if_else(INFOnum >= info_median, 1L, 0L))

### Optional: Summary tables
table(surv$nFREEINFO)
table(surv$nFREEINFObin)
table(surv$nTOPICS)
table(surv$nTOPICSbin)
table(surv$INTERESTbin)
survsum$INTERESTbin
table(surv$FREEINFObin)
table(surv$TOPICSbin)
table(surv$nSOURCE)
table(surv$nSOURCEbin)
table(surv$noSOURCEbin)
table(surv$SOURCEbin)
table(surv$INFOnum)
table(surv$INFObin)
survsum$INFOnum
# Output medians for reference
freeinfo_median
topics_median
source_median
info_median


```
## Cronbach's Alpha Calculations
```{r}


knowledge_items <- surv %>%
  select(PIGScorr, BRUCEcorr, CWDcorr, FLUALcorr, FLUcorr, 
         COVIDcorr, COVIDSPILLcorr, RABIESALcorr, RABIEScorr, TURKEYcorr)
attitude_ord_vars <- c("CWDALord", "BATSord", "PPEREQord", "EHDord",
                       "POPPLANord", "SURVEYord", "VACCINEord", "PREVALord", 
                       "DIVERSEord", "CONSEQord", "CLIMATEord", "EDREQord", "INFOord",
                       "HANDSONord", "DARWINord", "POPREDord")

# Recode More = 1, Neutral/Less = 0
attitude_binary <- surv %>%
  select(all_of(attitude_ord_vars)) %>%
  mutate(across(everything(), ~ if_else(. == "More", 1, 0)))
practice_items <- surv %>%
  select(CONTACTbin, FIELDbin, COLLECTbin, HANDLEbin, COUNTIESbin, PPEbin)
library(psych)

alpha_knowledge <- psych::alpha(knowledge_items, check.keys = TRUE)
alpha_attitudes <- psych::alpha(attitude_binary, check.keys = TRUE)
alpha_practices <- psych::alpha(practice_items, check.keys = TRUE)

# Print summary alpha values
cat("Knowledge α: ", round(alpha_knowledge$total$raw_alpha, 2), "\n")
cat("Attitudes α: ", round(alpha_attitudes$total$raw_alpha, 2), "\n")
cat("Practices α: ", round(alpha_practices$total$raw_alpha, 2), "\n")


```


# EXPORTS
### Data Frames
```{r}
#| include: false

###### Processed Responses ######
oup = file.path(analyses, "outputs")
write.csv(surv, file.path(oup, "processedsurv.csv"), row.names = FALSE)

```



# References
```{r}
# 
# RStudio.Version() 
# version$version.string
# citation()
# 
# #### to display the packages within the .qmd without creating another .bib ####
# knitr::write_bib(sub("^package:", "", grep("package", search(), value=TRUE)), file='')
# 
```

