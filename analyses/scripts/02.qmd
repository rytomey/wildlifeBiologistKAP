---
title: "Data Analyses"
output: 
  html_document:
    toc: true
    toc_float: true
    number_sections: true
    theme: readable
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
```

### Packages
```{r}
#| include: false

require(dplyr)
require(tidyr)
require(purrr)
require(vcd)
require(Hmisc)
require(broom)
require(effsize)
require(rcompanion)
require(ggplot2)
require(writexl)
require(janitor)
require(effectsize)
require(MASS)
require(knitr)
require(ordinal)
require(broom)
require(gt)
require(performance)
require(DHARMa)


```

### Data Import
```{r}
base     <- normalizePath(file.path("..", ".."), mustWork = FALSE)
analyses <- file.path(base, "analyses")
inp      <- file.path(analyses, "inputs")
oup      <- file.path(analyses, "outputs")
surv <- read.csv(file.path(oup, "processedsurv.csv"))

surv <- surv %>%
  mutate(across(c(AGE, CORRECTnum, CERTAINnum, nCOUNTIES, PRACnum,
                  nFREEINFO, nTOPICS, nSOURCE, INFOnum), as.numeric))


```

# Bivariate Analyses 
### Functions 
```{r}

# Chi-squared + Cramer's V
binFUN <- function(var1, var2, data) {
  x <- droplevels(factor(data[[var1]]))
  y <- droplevels(factor(data[[var2]]))
  tab <- table(x, y)
  if (any(dim(tab) < 2)) return(tibble())
  chi <- tryCatch(chisq.test(tab, simulate.p.value = TRUE, B = 999), error = function(e) NULL)
  assoc <- tryCatch(suppressWarnings(assocstats(tab)), error = function(e) NULL)
  cramers_v <- if (!is.null(assoc)) as.numeric(assoc$cramer) else NA
  tibble(
    var1 = var1, var2 = var2, test = "Chi-squared",
    p_value = unname(chi$p.value), cramers_v = cramers_v,
    dim1 = nrow(tab), dim2 = ncol(tab)
  )
}

# Wilcoxon Rank-Sum Test
coxFUN <- function(var1, var2, data) {
  if (!all(c(var1, var2) %in% names(data))) return(tibble())
  x <- factor(data[[var1]])
  y <- data[[var2]]
  keep <- complete.cases(x, y)
  x <- droplevels(x[keep]); y <- y[keep]
  if (!is.numeric(y) || length(unique(x)) != 2) return(tibble())
  w <- tryCatch(wilcox.test(y ~ x), error = function(e) NULL)
  if (is.null(w)) return(tibble())
  tibble(
    var1 = var1, var2 = var2, test = "Wilcoxon",
    group1 = levels(x)[1], group2 = levels(x)[2],
    median1 = median(y[x == levels(x)[1]], na.rm = TRUE),
    median2 = median(y[x == levels(x)[2]], na.rm = TRUE),
    W_stat = unname(w$statistic), p_value = w$p.value
  )
}


```

### Variables
```{r}

demoBIN <- c("AGEbin", "RACEbin", "GENDERbin", "INCOMEbin", "EDUCATIONbin",
             "DEGREEbin", "TWSbin", "COURSEbin", "SELFTITLEbin", "LICENSEbin",
             "COURSETIMEbin", "BIOTIMEbin")

knowBIN <- c("CORRECTmed", "CORRECTavg", "CERTAINmed", "CERTAINavg",
             "PIGScorr", "BRUCEcorr", "CWDcorr", "FLUALcorr", "FLUcorr",
             "COVIDcorr", "COVIDSPILLcorr", "RABIEScorr", "RABIESALcorr", "TURKEYcorr")

attBIN  <- c("FAVbin", "NEUTRALbin", "UNFAVbin", "ATTITUDEbin")
pracBIN <- c("CONTACTbin", "COUNTIESbin", "COLLECTbin", "HANDLEbin",
             "PPEbin", "FIELDbin", "STATEbin", "PRACbin", "nCOUNTIESbin")
interBIN <- c("FREEINFOedu", "TOPICSedu", "SOURCEedu", "ACCESSedu",
              "INTERESTedu", "INFObin", "EDREQedu", "INFOedu", "HANDSONedu")

knowNUM <- c("CORRECTnum", "CERTAINnum")
attNUM  <- c("FAVnum", "NEUTRALnum", "UNFAVnum", "ATTITUDEnum")
pracNUM <- c("nCOUNTIES", "PRACnum")
interNUM <- c("nFREEINFO", "nTOPICS", "nSOURCE", "INFOnum",
              "EDREQedunum", "INFOedunum", "HANDSONedunum")


```

### Comparisons 
```{r}

binLIST <- list(
  DEMO_KNOW  = expand.grid(var1 = demoBIN,  var2 = knowBIN, stringsAsFactors = FALSE),
  DEMO_ATT   = expand.grid(var1 = demoBIN,  var2 = attBIN, stringsAsFactors = FALSE),
  DEMO_PRACT = expand.grid(var1 = demoBIN,  var2 = pracBIN, stringsAsFactors = FALSE),
  DEMO_INTER = expand.grid(var1 = demoBIN,  var2 = interBIN, stringsAsFactors = FALSE),
  KNOW_PRACT = expand.grid(var1 = knowBIN,  var2 = pracBIN, stringsAsFactors = FALSE),
  KNOW_INTER = expand.grid(var1 = knowBIN,  var2 = interBIN, stringsAsFactors = FALSE)
)

wilcoxLIST <- list(
  DEMO_KNOW  = expand.grid(var1 = demoBIN,  var2 = knowNUM, stringsAsFactors = FALSE),
  DEMO_ATT   = expand.grid(var1 = demoBIN,  var2 = attNUM, stringsAsFactors = FALSE),
  DEMO_PRACT = expand.grid(var1 = demoBIN,  var2 = pracNUM, stringsAsFactors = FALSE),
  DEMO_INTER = expand.grid(var1 = demoBIN,  var2 = interNUM, stringsAsFactors = FALSE),
  KNOW_PRACT = expand.grid(var1 = knowBIN,  var2 = pracNUM, stringsAsFactors = FALSE)
)

```
### Run Tests
```{r}
# Run Chi-squared tests
binRESULTS <- purrr::map_dfr(names(binLIST), function(category) {
  df <- binLIST[[category]]
  purrr::pmap_dfr(df, function(var1, var2) {
    result <- tryCatch(binFUN(var1, var2, surv), error = function(e) tibble())
    if (nrow(result) > 0) result$category <- category
    result
  })
})

# Run Wilcoxon tests
wilcoxRESULTS <- purrr::map_dfr(names(wilcoxLIST), function(category) {
  df <- wilcoxLIST[[category]]
  purrr::pmap_dfr(df, function(var1, var2) {
    result <- tryCatch(coxFUN(var1, var2, surv), error = function(e) tibble())
    if (nrow(result) > 0) result$category <- category
    result
  })
})

```

#### Filters: Significant Results & Effect Sizes
```{r}

# Filter for significant p-values
sig_results <- all_biv_results %>%
  filter(!is.na(p_value), p_value < 0.05)

# ------------------------ Chi-squared + Cramer's V ------------------------
sig_chisq_effect <- binRESULTS %>%
  filter(!is.na(p_value), p_value < 0.05, !is.na(cramers_v), cramers_v >= 0.1)

# ------------------------ Wilcoxon + Rank-Biserial ------------------------
sig_wilcox_effect <- wilcoxRESULTS %>%
  filter(!is.na(p_value), p_value < 0.05) %>%
  rowwise() %>%
  mutate(
    rank_biserial = tryCatch({
      g1 <- surv[[var2]][surv[[var1]] == group1]
      g2 <- surv[[var2]][surv[[var1]] == group2]
      if (length(g1) > 1 && length(g2) > 1) {
        rcompanion::wilcoxonR(g1, g2)
      } else {
        NA_real_
      }
    }, error = function(e) NA_real_)
  ) %>%
  ungroup() %>%
  filter(!is.na(rank_biserial), abs(rank_biserial) >= 0.3)

```

## Export
```{r}

# ---- Export to CSV ----
write_csv(sig_chisq_effect, file.path(oup, "significant_chisq_results.csv"))
write_csv(sig_wilcox_effect, file.path(oup, "significant_wilcox_results.csv"))


# ---- Summary Statistics ----
n_chisq <- nrow(sig_chisq_effect)
n_wilcox <- nrow(sig_wilcox_effect)

cat("## Summary of Significant Bivariate Results\n")
cat(glue::glue("
- **{n_chisq} significant Chi-squared tests** had both p < 0.05 and Cramer's V ≥ 0.1.
- **{n_wilcox} Wilcoxon tests** had p < 0.05 and rank-biserial correlation ≥ 0.3, indicating moderate to strong group differences.\n\n"))
cat("Effect size thresholds follow Cohen's guidelines (Cramer's V ≥ 0.1; Rank-biserial ≥ 0.3).\n\n")


# ---- Formatted Tables ----
cat("### Table: Significant Chi-squared Results (Cramer's V ≥ 0.1)\n")
sig_chisq_effect %>%
  dplyr::select(var1, var2, category, p_value, cramers_v) %>%
  arrange(p_value) %>%
  knitr::kable(digits = 3)

cat("\n\n### Table: Significant Wilcoxon Results (|Rank Biserial| ≥ 0.3)\n")
sig_wilcox_effect %>%
  dplyr::select(var1, var2, category, p_value, rank_biserial, median1, median2) %>%
  arrange(p_value) %>%
  knitr::kable(digits = 3)
```

